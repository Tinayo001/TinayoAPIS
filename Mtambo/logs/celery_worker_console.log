
def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def test_celery(self):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def check_overdue_schedules():
    return 1


def xmap(task, it):
    return 1


def backend_cleanup():
    return 1


def debug_task(self):
    return 1


def chain(*args, **kwargs):
    return 1


def xstarmap(task, it):
    return 1


def accumulate(self, *args, **kwargs):
    return 1

 
 -------------- celery@tinayo001-HP-ProBook-4320s v5.4.0 (opalescent)
--- ***** ----- 
-- ******* ---- Linux-6.8.0-52-generic-x86_64-with-glibc2.39 2025-02-08 07:34:55
- *** --- * --- 
- ** ---------- [config]
- ** ---------- .> app:         Mtambo:0x6fff413fc980
- ** ---------- .> transport:   redis://localhost:6379/0
- ** ---------- .> results:     redis://localhost:6379/0
- *** --- * --- .> concurrency: 2 (prefork)
-- ******* ---- .> task events: ON
--- ***** ----- 
 -------------- [queues]
                .> celery           exchange=celery(direct) key=celery
                

[tasks]
  . Mtambo.celery.debug_task
  . jobs.tasks.check_overdue_schedules
  . jobs.tasks.test_celery


worker: Hitting Ctrl+C again will terminate all running tasks!

worker: Warm shutdown (MainProcess)

worker: Cold shutdown (MainProcess)

def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def test_celery(self):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def check_overdue_schedules(self):
    return 1


def xmap(task, it):
    return 1


def backend_cleanup():
    return 1


def debug_task(self):
    return 1


def chain(*args, **kwargs):
    return 1


def xstarmap(task, it):
    return 1


def accumulate(self, *args, **kwargs):
    return 1

 
 -------------- celery@tinayo001-HP-ProBook-4320s v5.4.0 (opalescent)
--- ***** ----- 
-- ******* ---- Linux-6.8.0-52-generic-x86_64-with-glibc2.39 2025-02-08 08:41:58
- *** --- * --- 
- ** ---------- [config]
- ** ---------- .> app:         Mtambo:0x7c7cf5b0b050
- ** ---------- .> transport:   redis://localhost:6379/0
- ** ---------- .> results:     redis://localhost:6379/0
- *** --- * --- .> concurrency: 2 (prefork)
-- ******* ---- .> task events: ON
--- ***** ----- 
 -------------- [queues]
                .> celery           exchange=celery(direct) key=celery
                

[tasks]
  . Mtambo.celery.debug_task
  . jobs.tasks.check_overdue_schedules
  . jobs.tasks.test_celery


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def check_overdue_schedules():
    return 1


def backend_cleanup():
    return 1


def debug_task(self):
    return 1


def chain(*args, **kwargs):
    return 1


def xstarmap(task, it):
    return 1


def accumulate(self, *args, **kwargs):
    return 1

Stale pidfile exists - Removing it.
 
 -------------- celery@tinayo001-HP-ProBook-4320s v5.4.0 (opalescent)
--- ***** ----- 
-- ******* ---- Linux-6.8.0-52-generic-x86_64-with-glibc2.39 2025-02-09 06:40:59
- *** --- * --- 
- ** ---------- [config]
- ** ---------- .> app:         Mtambo:0x7bc32de2cb90
- ** ---------- .> transport:   redis://localhost:6379/0
- ** ---------- .> results:     redis://localhost:6379/0
- *** --- * --- .> concurrency: 2 (prefork)
-- ******* ---- .> task events: ON
--- ***** ----- 
 -------------- [queues]
                .> celery           exchange=celery(direct) key=celery
                

[tasks]
  . Mtambo.celery.debug_task
  . jobs.tasks.check_overdue_schedules


worker: Hitting Ctrl+C again will terminate all running tasks!

worker: Warm shutdown (MainProcess)

def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def check_overdue_schedules():
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def backend_cleanup():
    return 1


def debug_task(self):
    return 1


def chain(*args, **kwargs):
    return 1


def xstarmap(task, it):
    return 1


def accumulate(self, *args, **kwargs):
    return 1

 
 -------------- celery@tinayo001-HP-ProBook-4320s v5.4.0 (opalescent)
--- ***** ----- 
-- ******* ---- Linux-6.8.0-52-generic-x86_64-with-glibc2.39 2025-02-09 06:53:28
- *** --- * --- 
- ** ---------- [config]
- ** ---------- .> app:         Mtambo:0x7990d1bfcb90
- ** ---------- .> transport:   redis://localhost:6379/0
- ** ---------- .> results:     redis://localhost:6379/0
- *** --- * --- .> concurrency: 2 (prefork)
-- ******* ---- .> task events: ON
--- ***** ----- 
 -------------- [queues]
                .> celery           exchange=celery(direct) key=celery
                

[tasks]
  . Mtambo.celery.debug_task
  . jobs.tasks.check_overdue_schedules


worker: Hitting Ctrl+C again will terminate all running tasks!

worker: Hitting Ctrl+C again will terminate all running tasks!

worker: Warm shutdown (MainProcess)

worker: Warm shutdown (MainProcess)

worker: Cold shutdown (MainProcess)

worker: Cold shutdown (MainProcess)

worker: Cold shutdown (MainProcess)

worker: Cold shutdown (MainProcess)

def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def check_overdue_schedules():
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def backend_cleanup():
    return 1


def debug_task(self):
    return 1


def chain(*args, **kwargs):
    return 1


def xstarmap(task, it):
    return 1


def accumulate(self, *args, **kwargs):
    return 1

 
 -------------- celery@tinayo001-HP-ProBook-4320s v5.4.0 (opalescent)
--- ***** ----- 
-- ******* ---- Linux-6.8.0-52-generic-x86_64-with-glibc2.39 2025-02-09 10:17:24
- *** --- * --- 
- ** ---------- [config]
- ** ---------- .> app:         Mtambo:0x7c68b8bf8740
- ** ---------- .> transport:   redis://localhost:6379/0
- ** ---------- .> results:     redis://localhost:6379/0
- *** --- * --- .> concurrency: 2 (prefork)
-- ******* ---- .> task events: ON
--- ***** ----- 
 -------------- [queues]
                .> celery           exchange=celery(direct) key=celery
                

[tasks]
  . Mtambo.celery.debug_task
  . jobs.tasks.check_overdue_schedules


worker: Hitting Ctrl+C again will terminate all running tasks!

worker: Warm shutdown (MainProcess)

def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def check_overdue_schedules():
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def backend_cleanup():
    return 1


def debug_task(self):
    return 1


def chain(*args, **kwargs):
    return 1


def xstarmap(task, it):
    return 1


def accumulate(self, *args, **kwargs):
    return 1

 
 -------------- celery@tinayo001-HP-ProBook-4320s v5.4.0 (opalescent)
--- ***** ----- 
-- ******* ---- Linux-6.8.0-52-generic-x86_64-with-glibc2.39 2025-02-09 10:17:58
- *** --- * --- 
- ** ---------- [config]
- ** ---------- .> app:         Mtambo:0x76af7981c6e0
- ** ---------- .> transport:   redis://localhost:6379/0
- ** ---------- .> results:     redis://localhost:6379/0
- *** --- * --- .> concurrency: 2 (prefork)
-- ******* ---- .> task events: ON
--- ***** ----- 
 -------------- [queues]
                .> celery           exchange=celery(direct) key=celery
                

[tasks]
  . Mtambo.celery.debug_task
  . jobs.tasks.check_overdue_schedules


worker: Hitting Ctrl+C again will terminate all running tasks!

worker: Warm shutdown (MainProcess)

def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def check_overdue_schedules():
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def backend_cleanup():
    return 1


def debug_task(self):
    return 1


def chain(*args, **kwargs):
    return 1


def xstarmap(task, it):
    return 1


def accumulate(self, *args, **kwargs):
    return 1

 
 -------------- celery@tinayo001-HP-ProBook-4320s v5.4.0 (opalescent)
--- ***** ----- 
-- ******* ---- Linux-6.8.0-52-generic-x86_64-with-glibc2.39 2025-02-09 10:22:14
- *** --- * --- 
- ** ---------- [config]
- ** ---------- .> app:         Mtambo:0x7e3e54af06e0
- ** ---------- .> transport:   redis://localhost:6379/0
- ** ---------- .> results:     redis://localhost:6379/0
- *** --- * --- .> concurrency: 2 (prefork)
-- ******* ---- .> task events: ON
--- ***** ----- 
 -------------- [queues]
                .> celery           exchange=celery(direct) key=celery
                

[tasks]
  . Mtambo.celery.debug_task
  . jobs.tasks.check_overdue_schedules


worker: Warm shutdown (MainProcess)

def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def check_overdue_schedules():
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def backend_cleanup():
    return 1


def debug_task(self):
    return 1


def chain(*args, **kwargs):
    return 1


def xstarmap(task, it):
    return 1


def accumulate(self, *args, **kwargs):
    return 1

 
 -------------- celery@tinayo001-HP-ProBook-4320s v5.4.0 (opalescent)
--- ***** ----- 
-- ******* ---- Linux-6.8.0-52-generic-x86_64-with-glibc2.39 2025-02-09 10:40:34
- *** --- * --- 
- ** ---------- [config]
- ** ---------- .> app:         Mtambo:0x771c5e718590
- ** ---------- .> transport:   redis://localhost:6379/0
- ** ---------- .> results:     redis://localhost:6379/0
- *** --- * --- .> concurrency: 2 (prefork)
-- ******* ---- .> task events: ON
--- ***** ----- 
 -------------- [queues]
                .> celery           exchange=celery(direct) key=celery
                

[tasks]
  . Mtambo.celery.debug_task
  . jobs.tasks.check_overdue_schedules


def chord(self, header, body, partial_args=0, interval=1, countdown=2, max_retries=3, eager=4, **kwargs):
    return 1


def check_overdue_schedules():
    return 1


def chunks(task, it, n):
    return 1


def unlock_chord(self, group_id, callback, interval=0, max_retries=1, result=2, Result=3, GroupResult=4, result_from_tuple=5, **kwargs):
    return 1


def group(self, tasks, result, group_id, partial_args, add_to_parent=0):
    return 1


def xmap(task, it):
    return 1


def backend_cleanup():
    return 1


def debug_task(self):
    return 1


def chain(*args, **kwargs):
    return 1


def xstarmap(task, it):
    return 1


def accumulate(self, *args, **kwargs):
    return 1

ERROR: Pidfile (logs/celery_worker.pid) already exists.
Seems we're already running? (pid: 23397)
